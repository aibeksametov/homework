# #1-esep
# string = input("Enter string: ")
# unique_chars = sorted(set(string))
# print("Unique chars:", *unique_chars)
# #2-esep
# numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
# if any(number > 5 for number in numbers):
#     print("The list contains at least one number greater than 5")

# if all(number > 0 for number in numbers):
#     print("All numbers in the list are greater than 0")
# else:
#     print("All numbers in the list aren't greater than 0 ")
# #3-esep
# matrix = [
#     [1, 2, 3],
#     [4, 5, 6],
#     [7, 8, 9]
# ]
# def rotate_matrix(matrix):
#     transposed = list(map(list, zip(*reversed(matrix))))
#     return transposed
# for row in rotate_matrix(matrix):
#     print(row)
# #4-esep
# def knapsack(weights, values, max_weight):
#     n = len(weights)
#     table = [[0 for _ in range(max_weight + 1)] for _ in range(n + 1)]

#     for i, (weight, value) in enumerate(zip(weights, values), start=1):
#         for j in range(1, max_weight + 1):
#             if weight > j:
#                 table[i][j] = table[i - 1][j]
#             else:
#                 table[i][j] = max(table[i - 1][j], table[i - 1][j - weight] + value)
#     return table[n][max_weight]
# weights = [2, 3, 4, 5]
# values = [3, 4, 5, 6]
# max_weight = 8

# print(knapsack(weights, values, max_weight)) 
# #5-esep
# def matrix_operation(matrix1, matrix2, operation):
#     if len(matrix1) != len(matrix2) or len(matrix1[0]) != len(matrix2[0]):
#         return None
    
#     result = []
#     for i, row1 in enumerate(matrix1):
#         row_result = []
#         for j, value1 in enumerate(row1):
#             value2 = matrix2[i][j]
#             if operation == "+":
#                 row_result.append(value1 + value2)
#             elif operation == "-":
#                 row_result.append(value1 - value2)
#             elif operation == "*":
#                 row_result.append(value1 * value2)
#         result.append(row_result)
#     return result
# matrix1 = [[1, 2], [3, 4]]
# matrix2 = [[5, 6], [7, 8]]
# result = matrix_operation(matrix1, matrix2, "*")
# print(result) 
